<?php
/**
 * @Library - teweb library
 * @author Paul Kosciecha http://www.truthengaged.org.uk
 * @copyright Copyright (C) Paul Kosciecha
 * @license GNU/GPL
 */
// no direct access
defined( '_JEXEC' ) or die( 'Restricted access' );
jimport('joomla.filesystem.file');
jimport('joomla.filesystem.folder');
class Tewebfile {

/**
     * Method to resize image
     *
     * @param array $fileinfo info of the file to be downloaded (generated by the getfileinfo function)
     * @param int $downloadmethod indicator of which download method to use
     */
     
function download($fileinfo, $downloadmethod)
{
	if (!$fileinfo->exists)
	{Tewebfile::error_msg ('LIB_TEWEB_FILE_NOT_FOUND');}	
	
	if ($fileinfo->size == '')
		{$sizeofheader = '';}
	else {$sizeofheader = "Content-Length: ".$fileinfo->size;}
  
    $user_agent = (isset($_SERVER["HTTP_USER_AGENT"]) ) ? $_SERVER["HTTP_USER_AGENT"] : $HTTP_USER_AGENT;
    while (@ob_end_clean());
    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
    header("Cache-Control: public");
    header("Content-Description: File Transfer");
	header("Content-Disposition: attachment; filename=".basename($fileinfo->file));
    if ($fileinfo->ext == 'pdf')
    {
       header("Content-Type: application/octet-stream");
    }
    else {
    header("Content-Type: application/octet-stream");}
    header("Content-Transfer-Encoding: binary");
    header($sizeofheader);
    $range = 0;

	if ($downloadmethod == 0)
	{
   if ($fileinfo->type == 0)
   {$download = Tewebfile::downloadlocal($fileinfo->file);}
   if ($fileinfo->type == 1)
   {$download = Tewebfile::downloadcurl($fileinfo->file);}
   }
   if ($downloadmethod == 1)
	{
   $download = Tewebfile::downloadlocal($fileinfo->file, $user_agent);
   }
   if ($downloadmethod == 2)
	{
   $download = Tewebfile::downloadcurl($fileinfo->file);
   }
}

/**
     * Method download using php readfile function
     *
     * @param string $file filename with path
     */
 	
function downloadlocal($file)
{ 
    readfile($file); 
}

/**
     * Method download using php curl function
     *
     * @param string $file filename with path
     * @param string $user_agent user agents from headers as defined in download function
     */
     
function downloadcurl($file, $user_agent)
{
// make the cURL request to $download_file
    $ch = curl_init();
	curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);
	curl_setopt($ch, CURLOPT_URL,$file);
	curl_setopt($ch, CURLOPT_FAILONERROR, true);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
	curl_setopt($ch, CURLOPT_AUTOREFERER, true);
	curl_setopt($ch, CURLOPT_BINARYTRANSFER,true);
	curl_setopt ($ch, CURLOPT_HEADER, 0);
	curl_exec($ch);
	curl_close($ch); 
}

/**
     * Method to set error
     *
     * @param string $file filename with path
     */

function error_msg($text) 
{ 
    die($text); 
} 

/**
     * Method to check whether a file exits
     *
     * @param    string $file The path of the file - either as absolute url or server path.
     * @param    boolean $local Set to true to force only a local check of file and prevent kicking into curl
     *
     * @return    bolean
     */

function checkfile($file, $local = false)
 {
    jimport('joomla.filesystem.file');
    
     $check = false;
     
     if ($local == 1)
     {$check = JFile::exists($file);}
     elseif (JFile::exists($file))
     { $check = true;}
     else {
     
        if (in_array  ('curl', get_loaded_extensions()))
        {
            $curl = curl_init($file);
            $timeout = 5;

            //don't fetch the actual page, you only want to check the connection is ok
            curl_setopt($curl, CURLOPT_NOBODY, true);
            curl_setopt ($curl, CURLOPT_CONNECTTIMEOUT, $timeout);

            //do request
            $result = curl_exec($curl);
    
            if (!$result)
            {$result = curl_exec($curl);}

            $ret = false;

            //if request did not fail
            if ($result != false) {
                //if request was ok, check response code
                $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);  

                if ($statusCode == 200 || $statusCode == 302) {
                $ret = true;   
                 }
            }
            curl_close($curl);
             $check = $ret;
         }
         elseif (@fopen($file,"r") == true)
         {$check = true;}
     }
     return $check;
     }

/**
     * Method to write a new file
     * @param string $filename name of file including any path details from base
     * @param string $filecontent content to put in the file
     * @return   boolean
     */

function writefile($filename, $filecontent, $noabsolute = false)
{

// Set FTP credentials, if given
        jimport('joomla.client.helper');
        jimport('joomla.filesystem.file');
        JClientHelper::setCredentialsFromRequest('ftp');
        $ftp = JClientHelper::getCredentials('ftp');
        $client =& JApplicationHelper::getClientInfo(JRequest::getVar('client', '0', '', 'int'));
        if (!$noabsolute)
        {$file = JPATH_SITE.DS.$filename;} else {$file = $filename;}
    // Try to make the template file writeable
        if (JFile::exists($file) && !$ftp['enabled'] && !JPath::setPermissions($file, '0755')) {
            JError::raiseNotice('SOME_ERROR_CODE', JText::_('LIB_TEWEB_NOT_MAKE_FILE_WRITABLE'));
        }

    $writefile = JFILE::write($file, $filecontent);
    
    return $writefile;
}

/**
     * Method to copy a file
     * @param string $url url of the file to open
     * @param string $file absolute path to copy to on your server
     * @return boolean
     */

function copyfile($url, $file, $forcelocal = false)
{
    $write = false;
    //check if local or not
    $local = Tewebfile::checkiflocal($url);
    //get path to get the folder
    $path = Tewebfile::getpath($file);
    // if local - check folder and create, copy file using Jfile
    if ($local || $forcelocal)
    {
        $pos = strpos($url,JPATH_SITE);
        if ($pos === false) 
        {$source = Tewebfile::adjusttoabsolute($url);}
        else {$source = $url;}
        if (!Jfolder::exists($path))
        {JFolder::create($path);}
        $write = JFile::copy($source, $file);
    }
    // if not local get file using curl and then checkfolder and create and write file
    else {
        $source = Tewebfile::openfile($url);
        if (!Jfolder::exists($path))
        {JFolder::create($path);}
        $write = Tewebfile::writefile($file, $source, true);
    }
    return $write;
}

/**
     * Method to open a file
     * @param string $url url of the file to open
     * @return string
     */

function openfile($url)
{
    $file = null;
    if (Tewebfile::checkfile($url))
    {        
         $ch = curl_init($url);
         curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
         curl_setopt($ch, CURLOPT_POST, FALSE);
         $file = curl_exec($ch);
         curl_close($ch);
    }
    return $file;
}

/**
     * Method to get file info
     * @param string $filename name of the file
     * @param int $filesize size in bytes of the file
     * @param int $type of request
     * @return  array
     */

function buildfileinfo($filename, $filesize = '', $type = '')
{
$fileinfo->exists = '';
$fileinfo->size = '';    
$fileinfo->file = '';
$fileinfo->type = '';    
$fileinfo->ext = '';
        
//check the link is real link if not return fileinfo empty        
$ftpcheck = substr($filename, 0, 6);
$httpcheck = substr($filename, 0, 7);
$httpscheck = substr($filename, 0, 8);
if ($ftpcheck == 'ftp://' || $httpcheck == 'http://' || $httpscheck == 'https://')
{
$local = Tewebfile::checkiflocal($filename);
if ($local)
{         
$file = Tewebfile::adjusttoabsolute($filename);
if ($type != 'pod')
{$fileinfo->file = $file;}
else {$fileinfo->file = $filename;}
if ($filesize == 0 || !$filesize)
{
$fileinfo->exists = Tewebfile::checkfile($file);    
if ($fileinfo->exists)
{$fileinfo->size = Tewebfile::getsizelocal($file);}
}
else 
{$fileinfo->size = $filesize;
$fileinfo->exists = true;}
$fileinfo->type = 0;
}
else
{
$fileinfo->file = $filename;
if ($filesize == 0 || !$filesize)
{
$fileinfo->exists = Tewebfile::checkfile($filename);
if ($fileinfo->exists && function_exists('curl_init'))
{$fileinfo->size = Tewebfile::getsizecurl($filename);}
}
else 
{$fileinfo->size = $filesize;
$fileinfo->exists = true;}
$fileinfo->type = 1;
}
$pathinfo = pathinfo($fileinfo->file);
if (isset ($pathinfo['extension']))
{$fileinfo->ext = $pathinfo['extension'];}
else {$ext = null;}
}
return $fileinfo;
}    

/**
     * Method to get filesize of local file
     * @param string $file file to get size from
     * @return   int
     */

function getsizelocal($file)
{
$size = filesize($file);
return $size;
}

/**
     * Method to get filesize of remote file
     * @param string $file file to get size from
     * @return   int
     */
     
function getsizecurl($file)
{
//use curl to get filesize
if (function_exists('curl_init'))
{
$headers = get_headers ( $file, 1 );
if (isset ($headers['Content-Length']))
{$size = $headers['Content-Length'];}
else {$size = '';}     
}
else {$size = '';} 
return $size;
}

/**
     * Method to get website url for root folder
     * @return   string
     */

function getwebsite()
{
// get website url    
$website = JURI::BASE();
$website = str_replace('administrator/','', $website );
return $website;
}

/**
     * Method to check if s local file
     * @param string $file file to check
     * @return   boolean
     */

function checkiflocal($file)
{
// get website url    
$website = Tewebfile::getwebsite();
//check if website in file url
$pos = strpos($file,$website);
if($pos === false) { 
$website2 = str_replace('http://', 'http://www.', $website);
$pos3 = strpos($file, $website2);
if ($pos3 === false) {
$pos2 = strpos($file,JPATH_SITE);
if($pos2 === false) { return false;}
else {return true;}
}
else {return true;}
}
else {return true;}
}

/**
     * Method to adjust filepath from url to absolute
     * @param string $file file to adjust
     * @return   string
     */

function adjusttoabsolute($file)
{
// get website url    
$website = Tewebfile::getwebsite();
// remove website base url
$file = str_replace($website, '', $file);    
$file = JPATH_SITE.DS.$file;
return $file;
}

/**
     * Method to remove filename and return path from a url type string
     * @param string $file file to adjust
     * @return   string
     */

function getpath($file)
{
// get url details   
$pathinfo = pathinfo($file);
// remove filename
$path = str_replace($pathinfo['basename'], '', $file);
return $path;
}

}

?>